generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String           @id @default(cuid())
  email                       String           @unique
  password                    String
  firstName                   String
  lastName                    String
  profileImage                String?
  bio                         String?
  walletAddress               String?          @unique
  isVerified                  Boolean          @default(false)
  userType                    UserType         @default(STARTUP)
  subscriptionTier            SubscriptionTier @default(FREE)
  subscriptionExpiresAt       DateTime?
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @updatedAt
  lastLoginAt                 DateTime?
  emailVerificationExpiry     DateTime?
  emailVerificationToken      String?          @unique
  failedLoginAttempts         Int              @default(0)
  isEmailVerified             Boolean          @default(false)
  lockedUntil                 DateTime?
  passwordResetExpiry         DateTime?
  passwordResetToken          String?          @unique
  twoFactorBackupCodes        String[]
  twoFactorEnabled            Boolean          @default(false)
  twoFactorSecret             String?
  company                     Company?
  receivedMessages            Message[]        @relation("MessageReceiver")
  sentMessages                Message[]        @relation("MessageSender")
  notifications               Notification[]
  receivedPartnershipRequests Partnership[]    @relation("PartnershipReceiver")
  sentPartnershipRequests     Partnership[]    @relation("PartnershipRequester")
  sessions                    UserSession[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model Company {
  id                    String                 @id @default(cuid())
  name                  String
  description           String
  website               String?
  logoUrl               String?
  foundedYear           Int?
  teamSize              TeamSize?
  fundingStage          FundingStage?
  totalFunding          Decimal?               @db.Decimal(15, 2)
  isLookingForFunding   Boolean                @default(false)
  isLookingForPartners  Boolean                @default(true)
  contactEmail          String?
  twitterHandle         String?
  discordServer         String?
  telegramGroup         String?
  country               String?
  city                  String?
  timezone              String?
  isVerified            Boolean                @default(false)
  verificationLevel     VerificationLevel      @default(BASIC)
  trustScore            Float                  @default(0.0)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  ownerId               String                 @unique
  blockchainPreferences BlockchainPreference[]
  owner                 User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  receivedPartnerships  Partnership[]          @relation("PartnershipCompanyReceiver")
  sentPartnerships      Partnership[]          @relation("PartnershipCompanyRequester")

  @@map("companies")
}

model BlockchainPreference {
  id         String     @id @default(cuid())
  companyId  String
  blockchain Blockchain
  isPrimary  Boolean    @default(false)
  company    Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, blockchain])
  @@map("blockchain_preferences")
}

model Partnership {
  id                 String            @id @default(cuid())
  requesterId        String
  requesterCompanyId String
  receiverId         String
  receiverCompanyId  String
  partnershipType    PartnershipType
  title              String
  description        String
  proposedTerms      String?
  status             PartnershipStatus @default(PENDING)
  isVerified         Boolean           @default(false)
  verificationHash   String?
  matchScore         Float?
  matchReason        String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  respondedAt        DateTime?
  verifiedAt         DateTime?
  messages           Message[]
  receiverCompany    Company           @relation("PartnershipCompanyReceiver", fields: [receiverCompanyId], references: [id])
  receiver           User              @relation("PartnershipReceiver", fields: [receiverId], references: [id])
  requesterCompany   Company           @relation("PartnershipCompanyRequester", fields: [requesterCompanyId], references: [id])
  requester          User              @relation("PartnershipRequester", fields: [requesterId], references: [id])

  @@map("partnerships")
}

model Message {
  id            String       @id @default(cuid())
  content       String
  messageType   MessageType  @default(TEXT)
  senderId      String
  receiverId    String
  partnershipId String?
  isRead        Boolean      @default(false)
  isDeleted     Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  readAt        DateTime?
  partnership   Partnership? @relation(fields: [partnershipId], references: [id])
  receiver      User         @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender        User         @relation("MessageSender", fields: [senderId], references: [id])

  @@map("messages")
}

model Notification {
  id               String           @id @default(cuid())
  userId           String
  title            String
  content          String
  notificationType NotificationType
  partnershipId    String?
  messageId        String?
  isRead           Boolean          @default(false)
  isDeleted        Boolean          @default(false)
  createdAt        DateTime         @default(now())
  readAt           DateTime?
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum UserType {
  STARTUP
  INVESTOR
  ECOSYSTEM_PLAYER
  INDIVIDUAL
}

enum SubscriptionTier {
  FREE
  PREMIUM
  ENTERPRISE
}

enum Blockchain {
  ETHEREUM
  BITCOIN
  SOLANA
  POLYGON
  BINANCE_SMART_CHAIN
  AVALANCHE
  CARDANO
  POLKADOT
  COSMOS
  ARBITRUM
  OPTIMISM
  BASE
  OTHER
}

enum PartnershipType {
  TECHNICAL_INTEGRATION
  MARKETING_COLLABORATION
  FUNDING_OPPORTUNITY
  ADVISORY_PARTNERSHIP
  JOINT_VENTURE
  ECOSYSTEM_PARTNERSHIP
  SERVICE_PROVIDER
  TALENT_EXCHANGE
  OTHER
}

enum PartnershipStatus {
  PENDING
  ACCEPTED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum VerificationLevel {
  BASIC
  VERIFIED
  PREMIUM_VERIFIED
  ENTERPRISE_VERIFIED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  LINK
  PARTNERSHIP_REQUEST
  SYSTEM
}

enum NotificationType {
  PARTNERSHIP_REQUEST
  PARTNERSHIP_ACCEPTED
  PARTNERSHIP_REJECTED
  NEW_MESSAGE
  PROFILE_VERIFIED
  SUBSCRIPTION_EXPIRED
  MATCH_SUGGESTION
  SYSTEM_UPDATE
}

enum FundingStage {
  PRE_SEED
  SEED
  SERIES_A
  SERIES_B
  SERIES_C
  SERIES_D_PLUS
  IPO
  PROFITABLE
}

enum TeamSize {
  SOLO
  SMALL_2_10
  MEDIUM_11_50
  LARGE_51_200
  ENTERPRISE_200_PLUS
}
